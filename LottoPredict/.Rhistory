View(test)
table(test$CRS_ARR_TIME%/%100)
table(carriers$AA$CRS_ARR_TIME%/%100)
table(carriers$AS$CRS_ARR_TIME%/%100)
table(carriers$B6$CRS_ARR_TIME%/%100)
test <- carriers$B6
View(test)
View(test)
source('~/nycdsa/spotify/readData.R')
test <- carriers$B6
View(test)
?mapply
source('~/nycdsa/spotify/readData.R')
source('~/nycdsa/spotify/readData.R')
ap.tz('JFK')
source('~/nycdsa/spotify/readData.R')
test <- carriers$AA
View(test)
View(test)
source('~/nycdsa/spotify/readData.R')
test <- carriers$AA
View(test)
View(test)
source('~/nycdsa/spotify/readData.R')
test <- carriers$AA
View(test)
View(test)
rm(test)
test <- carriers$AA
View(test)
View(test)
test <- data.frame(carriers$AA)
source('~/nycdsa/spotify/readData.R')
test <- carriers$AA
View(test)
View(test)
source('~/nycdsa/spotify/readData.R')
test <- carriers$AA
class(test)
class(test$CRS_DEP_STD)
class(test$FL_ID)
source('~/nycdsa/spotify/readData.R')
4491011-490949
491011-490949
source('~/nycdsa/spotify/readData.R')
test <- carriers$AA
source('~/nycdsa/spotify/readData.R')
source('~/nycdsa/spotify/readData.R')
test <- carriers$AA
test <- carriers$DL
source('~/nycdsa/spotify/readData.R')
test <- carriers$DL
debugSource('~/nycdsa/spotify/readData.R')
debugSource('~/nycdsa/spotify/readData.R')
table(AA$FL_ID)
length(table(AA$FL_ID))
AA[AA$FL_ID == 'SNA_^$%_DFW',]
AA[AA$FL_ID == 'SNA_645_DFW',]
View(AA)
View(AA)
source('~/nycdsa/spotify/readData.R')
debugSource('~/nycdsa/spotify/readData.R')
class(B6$CRS_DEP_STD)
class(B6$CRS_DEP_STD[[1]])
length(class(B6$CRS_DEP_STD[[1]]))
length(B6$CRS_DEP_STD[[1]])
B6$CRS_DEP_STD[[1]]
B6$CRS_DEP_STD[1]
length(unlist(B6$CRS_ARR_STD))
debugSource('~/nycdsa/spotify/readData.R')
debugSource('~/nycdsa/spotify/readData.R')
nrow(carriers$AA)
nrow(AA)
length(AA$CRS_DEP_STD)
length(AA$CRS_ARR_STD)
nrow(AA) == length(AA$CRS_DEP_STD) & nrow(AA) == length(AA$CRS_ARR_STD)
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(testInheritedMethods()$CRS_ARR_STD)
test <- AA
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(testInheritedMethods()$CRS_ARR_STD)
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- AS
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- B6
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- DL
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- EV
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- F9
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- HA
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- MQ
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- OO
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- UA
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- VX
test <- WN
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
AA$CRS_DEP_STD <- unlist(AA$CRS_DEP_STD )
debugSource('~/nycdsa/spotify/readData.R')
test <- AA
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- AS
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- B6
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$AA
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$AS
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$B6
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$DL
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test[1,]
test$CRS_ARR_STD
qwert <- unlist(test$CRS_ARR_STD)
nrow(carriers$DL)
test <- carriers$EV
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$F9
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$HA
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$MQ
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$MQ
test <- carriers$NK
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$OO
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$UA
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$VX
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
test <- carriers$WN
nrow(test) == length(test$CRS_DEP_STD) & nrow(test) == length(test$CRS_ARR_STD)
View(test)
source('~/nycdsa/spotify/AnalysisFunctions.R')
test <- carriers$AA
test2 <- FindCorrs(test)
x <- test[test$FL_ID == "LAX_900_JFK"]
x <- test[test$FL_ID == "LAX_900_JFK",]
y <- test[test$FL_ID == "LAX_800_JFK",]
View(x)
View(y)
source('~/nycdsa/spotify/AnalysisFunctions.R')
test2 <- FindCorrs(test)
test2 <- FindCorrs(test)
source('~/nycdsa/spotify/AnalysisFunctions.R')
test2 <- FindCorrs(test)
test2 <- FindCorrs(test)
source('~/nycdsa/spotify/AnalysisFunctions.R')
test2 <- FindCorrs(test)
source('~/nycdsa/spotify/AnalysisFunctions.R')
test2 <- FindCorrs(test)
test <- carriers$HA
test2 <- FindCorrs(test)
test <- carriers$DL
test2 <- FindCorrs(test)
test <- carriers$VX
test2 <- FindCorrs(test)
table(test$ORIGIN)
str(carriers)
source('~/nycdsa/spotify/MainAnalysis.R')
source('~/nycdsa/spotify/MainAnalysis.R')
View(test)
View(test)
View(test2)
View(test2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(ranked)
source('~/.active-rstudio-document')
test3 <- GetResults(final$DL)
View(test3)
View(test3)
source('~/nycdsa/spotify/AnalysisFunctions.R')
getwd()
**Hypothesis test:** We used a function that calculates a p-value in the case where (1) the CRS_ARR_TIME of flight $A$ precedes CRS_DEP_TIME of flight $B$, where both times have been adjusted as described above and (2) $A$ was delayed at least 18 times, i.e. about 5% of a year's daily flights. (When these conditions do not hold the function returns a "p-value" of 1.)  The test uses the binomial distribution applied to the instances of flight $B$ on days when flight $A$ was delayed. If $n$ is the number of days when $A$ was delayed and $k$ is the number of these days on which $B$ was also delayed, then the p-value is $P(B(n,p) \geq k)$ where $p$ is the unconditonal probability $P(B)$. The function itself only returns a p-value. The level of significance is determined by the number of flights being assessed for the given carrier, specifically $\frac{1}{F^2}$ where $F$ is the number of flights offered by the carrier at least 250 times.
?library
table(carriers$AS$ORIGIN)
table(carriers$AS$DEST)
table(carriers$AA$ORIGIN)
table(carriers$B6$ORIGIN)
table(carriers$DJ$ORIGIN)
table(carriers$DL$ORIGIN)
source('~/nycdsa/spotify/readData.R')
table(carriers$EV$ORIGIN)
table(carriers$MQ$ORIGIN)
table(carriers$NK$ORIGIN)
table(carriers$OO$ORIGIN)
table(carriers$UA$ORIGIN)
setwd("..")
?colSums
?lm
model.data <- read.csv("../data/nj_cash_5.csv")
getwd()
setwd("../datascience/DPP_project")
model.data <- read.csv("../data/nj_cash_5.csv")
list.dirs()
setwd("app/")
model.data <- read.csv("../data/nj_cash_5.csv")
View(model.data)
View(model.data)
model.data <- read.csv("../data/nj_cash_5.csv")
set.seed(0)
intrain <- createDataPartition(y = model.data[,prize_3],
p = 0.75,
list = FALSE)
training <- model.data[intrain,]
testing <- model.data[-intrain,]
library(caret)
model.data <- read.csv("../data/nj_cash_5.csv")
set.seed(0)
intrain <- createDataPartition(y = model.data[,prize_3],
p = 0.75,
list = FALSE)
training <- model.data[intrain,]
testing <- model.data[-intrain,]
intrain <- createDataPartition(y = model.data[,prize_3],
p = 0.75,
list = FALSE)
intrain <- createDataPartition(y = model.data[,prize_3],
p = 0.75,
list = FALSE)
model.data <- read.csv("../data/nj_cash_5.csv")
intrain <- createDataPartition(y = model.data[,prize_3],
p = 0.75,
list = FALSE)
model.data$prize_3
intrain <- createDataPartition(y = model.data$prize_3,
p = 0.75,
list = FALSE)
library(dplyr)
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,matches('^n.|drawdate'))
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
}
View(features)
View(features)
model.data <- inner_join(features,prizes,by="drawdate")
View(model.data)
View(model.data)
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
}
model.data <- inner_join(features,prizes,by="drawdate") %>%
select(n1:prize_3)
rm(temp,features,prizes)
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
}
model.data <- inner_join(features,prizes,by="drawdate") %>%
select(n1:prize_3)
rm(temp,features,prizes,i,ft,SetFlag)
View(model.data)
shiny::runApp()
shiny::runApp()
shiny::runApp('~/datasci4good/W-se-project/app')
getwd()
shiny::runApp()
n.trees = seq(from = 1000, to = 10000, by = 1000)
shrinkage = c(0.001, 0.0001)
interaction.depth = c(1,2,3)
n.minobsinnode = 10
boostGrid = expand.grid(n.trees = n.trees,
shrinkage = shrinkage,
interaction.depth = interaction.depth,
n.minobsinnode = n.minobsinnode)
modelfit <- train(training[[pars$prize]] ~ .,
data = training[,-ncol(training)], method = "gbm",
distribution = "gaussian",
verbose = FALSE,
tuneGrid = boostGrid,
trControl = trainControl(method = "cv", number = 5))
modelfit <- train(prize_3 ~ .,
data = model.data, method = "gbm",
distribution = "gaussian",
verbose = FALSE,
tuneGrid = boostGrid,
trControl = trainControl(method = "cv", number = 5))
detach(package:plyr)
rm(modelfit)
modelfit <- train(prize_3 ~ .,
data = model.data, method = "lm",
distribution = "gaussian",
verbose = FALSE,
tuneGrid = boostGrid,
trControl = trainControl(method = "cv", number = 5))
modelfit <- train(prize_3 ~ .,
data = model.data, method = "lm",
distribution = "gaussian")
warnings()
library(caret)
library(dplyr)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
features = select(features,drawdate:n42)
}
library(caret)
library(dplyr)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
features = select(features,drawdate:f42)
}
library(caret)
library(dplyr)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
}
features = select(features,drawdate:f42)
model.data <- inner_join(features,prizes,by="drawdate") %>%
select(n1:prize_3)
rm(temp,features,prizes,i,ft)
library(caret)
library(dplyr)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
}
features = select(features,drawdate:f41)
model.data <- inner_join(features,prizes,by="drawdate") %>%
select(n1:prize_3)
rm(temp,features,prizes,i,ft)
modelfit <- lm(prize_3 ~ ., data = model.data)
summary(modelfit)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
}
features = select(features,drawdate:f41)
model.data <- inner_join(features,prizes,by="drawdate") %>%
select(n1:prize_3)
rm(temp,features,prizes,i,ft)
modelfit <- lm(prize_3 ~ ., data = model.data)
SetFlag <- function(x,n){
return(as.numeric(any(x == n)))
}
temp <- read.csv("../data/nj_cash_5.csv")
features <- select(temp,drawdate,n1,n2,n3,n4,n5)
prizes <- select(temp,drawdate,prize_3)
for(i in 1:43){
ft = paste('f', as.character(i), sep = '')
features[[ft]] = apply(features[,2:6],1,function(x) SetFlag(x,i))
}
View(features)
View(features)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?checkboxGroupInput()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(modelfit)
modelfit$coefficients
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
getwd()
runApp()
runApp()
getwd()
getwd()
shiny::runApp()
getwd()
setwd("..")
getwd()
??date
now()
today()
Sys.Date()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getwd()
list.files()
?hist
hist(read.csv("../data/nj_cash_5.csv")$prize_3)
hist(read.csv("../data/nj_cash_5.csv")$prize_3)
hist(read.csv("../data/nj_cash_5.csv")$prize_3)
getwd()
setwd("presentation")
hist(read.csv("../data/nj_cash_5.csv")$prize_3)
```
```
Predicting Lottery Payouts
source('~/.active-rstudio-document', echo=TRUE)
?hist
runGitHub('DPP_project','lotterdata')
runGitHub('DPP_project/app','lotterdata')
getwd()
setwd("..")
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
getwd()
setwd("app")
runApp()
library(shinyapps)
deployApp()
deployApp()
shinyapps::setAccountInfo(name='lotterdata', token='F954C8D046AEB17A477558FA391CFA98', secret='ANm2dqAqjfF6HeSWnldbfxCjPUGtHGpqA4EfjPC2')
deployApp()
getwd()
deployApp(".")
shinyapps::setAccountInfo(name='lotterdata', token='F954C8D046AEB17A477558FA391CFA98', secret='ANm2dqAqjfF6HeSWnldbfxCjPUGtHGpqA4EfjPC2')
deployApp()
setwd("..")
getwd()
deployApp()
setwd("app")
deployApp()
setwd("..")
setwd("LottoPredict")
runApp()
deployApp()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::install_github('rstudio/packrat')
deployApp()
deployApp()
shiny::runApp()
deployApp()
